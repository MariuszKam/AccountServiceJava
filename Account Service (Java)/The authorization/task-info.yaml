type: edu
files:
  - name: src/account/AccountServiceApplication.java
    visible: true
    text: |-
      package account;
      
      import org.modelmapper.ModelMapper;
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      import org.springframework.context.annotation.Bean;
      
      @SpringBootApplication
      public class AccountServiceApplication {
      
          public static void main(String[] args) {
              SpringApplication.run(AccountServiceApplication.class, args);
          }
      
          @Bean
          public ModelMapper modelMapper() {
              return new ModelMapper();
          }
      
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |+
      server.port=28852
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
      spring.jackson.serialization.INDENT_OUTPUT=true
      
      spring.security.user.name=admin
      
      #Database Config
      server.error.include-message=always
      spring.h2.console.enabled=true
      spring.datasource.url=jdbc:h2:file:../service_db
      spring.jpa.hibernate.ddl-auto = create
    
    
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'org.springframework.boot:spring-boot-starter-security'
          implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.2'
          implementation 'com.h2database:h2'
          implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
          //Jackson
          implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
          //ModelMapper
          implementation 'org.modelmapper:modelmapper:3.1.1'
          //Lombok
          compileOnly 'org.projectlombok:lombok:1.18.28'
          annotationProcessor 'org.projectlombok:lombok:1.18.28'
      
      }
    learner_created: false
  - name: src/account/businesslayer/user/User.java
    visible: true
    text: |
      package account.businesslayer.user;
      
      
      import jakarta.persistence.*;
      import lombok.*;
      
      
      @Entity
      @Table(name = "users")
      @NoArgsConstructor(force = true)
      @AllArgsConstructor
      @Setter
      @Getter
      public class User {
          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          @Column(unique = true, nullable = false)
          private final long id;
          private final String name;
          private final String lastname;
          private final String email;
          private String password;
      
      
          public boolean isEmailCorrect() {
              assert email != null;
              return  email.matches("^[a-zA-Z]+@acme.com$");
          }
          public boolean isCorrect() {
              return isEmailCorrect() &&
                      name != null && !name.isEmpty() &&
                      lastname != null && !lastname.isEmpty() &&
                      email != null && !email.isEmpty() &&
                      password != null && !password.isEmpty();
          }
      
      }
    learner_created: false
  - name: src/account/businesslayer/user/SignupDTO.java
    visible: true
    text: |
      package account.businesslayer.user;
      
      import lombok.*;
      
      
      @NoArgsConstructor
      @AllArgsConstructor
      @Getter
      @Setter
      public class SignupDTO {
          private Long id;
          private String name;
          private String lastname;
          private String email;
      }
    learner_created: false
  - name: src/account/persistencelayer/UserRepository.java
    visible: true
    text: |
      package account.persistencelayer;
      
      import account.businesslayer.user.User;
      import org.springframework.data.repository.CrudRepository;
      import org.springframework.stereotype.Repository;
      
      @Repository
      public interface UserRepository extends CrudRepository<User, Long> {
      
          User findByEmail(String email);
          boolean existsByEmail(String email);
      }
    learner_created: false
  - name: test/AccountServiceTest.java
    visible: false
    text: |-
      import account.AccountServiceApplication;
      import com.fasterxml.jackson.annotation.JsonInclude;
      import com.fasterxml.jackson.core.JsonProcessingException;
      import com.fasterxml.jackson.databind.ObjectMapper;
      import com.google.gson.JsonArray;
      import com.google.gson.JsonElement;
      import com.google.gson.JsonObject;
      import com.google.gson.JsonParser;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.request.HttpRequest;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.springframework.http.HttpStatus;
      
      import java.util.*;
      import java.util.stream.Collectors;
      
      import static org.hyperskill.hstest.common.JsonUtils.getJson;
      import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      class TestReq {
      
        private Map<String, Object> properties = new LinkedHashMap<>();
      
        // Deep copy
        public TestReq(TestReq another) {
          this.properties = another.properties.entrySet().stream()
                  .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
        }
      
        public TestReq() {
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          try {
            return mapper.writeValueAsString(this.properties);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      
        public TestReq setProps(String key, Object value) {
          properties.put(key, value);
          return this;
        }
      
      }
      
      public class AccountServiceTest extends SpringTest {
      
        private  final String signUpApi = "/api/auth/signup";
        private  final String changePassApi = "/api/auth/changepass";
        private  final String getEmployeePaymentApi = "/api/empl/payment";
        private final String postPaymentApi = "/api/acct/payments";
        private final String putRoleApi = "/api/admin/user/role";
        private final String adminApi = "/api/admin/user/";
      
      
        static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
                "PasswordForApril", "PasswordForMay", "PasswordForJune",
                "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
                "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};
      
        List<Integer> userIdList = new ArrayList<>();
      
        private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
                .setProps("lastname", "Ivanov")
                .setProps("email", "IvanIvanov@acme.com")
                .setProps("password", "rXoa4CvqpLxW");
        private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
                .setProps("lastname", "Petrov")
                .setProps("email", "PetrPetrov@acme.com")
                .setProps("password", "nWza98hjkLPE");
        private final TestReq johnDoe = new TestReq().setProps("name", "John")
                .setProps("lastname", "Doe")
                .setProps("email", "JohnDoe@acme.com")
                .setProps("password", "oMoa3VvqnLxW");
        private final TestReq maxMus = new TestReq().setProps("name", "Max")
                .setProps("lastname", "Mustermann")
                .setProps("email", "MaxMustermann@acme.com")
                .setProps("password", "ai0y9bMvyF6G");
        private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
                .setProps("lastname", "Nemo")
                .setProps("email", "nautilus@pompilius.com")
                .setProps("password", "wings");
        private final TestReq ivanHoe = new TestReq().setProps("name", "Ivan")
                .setProps("lastname", "Hoe")
                .setProps("email", "IvanHoe@acme.com")
                .setProps("password", "nWza98hjkLPE");
      
        private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
        private final String petrPetrovCorrectUser = petrPetrov.toJson();
        private final String ivanHoeCorrectUser = ivanHoe.toJson();
        private final String jDCorrectUser = johnDoe.toJson();
        private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
        private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
        private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
        private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
        private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
        private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
        private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
        private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
        private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
        private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
        private final String maxMusCorrectUser = maxMus.toJson();
        private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
        private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
        private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
        private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
        private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
        private final String captainNemoWrongUser = captainNemo.toJson();
        private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      
        private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
        private final String jDShortPass = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
        private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();
      
        private String paymentsList = convert(new String[]{
                new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 654321).toJson(),
                new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "02-2021")
                        .setProps("salary", 987).toJson(),
                new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "03-2021")
                        .setProps("salary", 21).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 123456).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "02-2021")
                        .setProps("salary", 456789).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "03-2021")
                        .setProps("salary", 12).toJson()
        });
        private final String wrongPaymentListData = convert(new String[]{new TestReq().setProps("employee", "maxmustermann@acme.com")
                .setProps("period", "13-2021").setProps("salary", 123456).toJson()});
        private  String wrongPaymentListSalary = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
                .setProps("period", "11-2022").setProps("salary", -1).toJson()});
        private final String wrongPaymentListDuplicate = convert(new String[]{
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 123456).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 456789).toJson()
        });
        private final String updatePayment = new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                .setProps("salary", 77777).toJson();
        private final String updatePaymentResponse = new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson();
        private final String updatePaymentWrongDate = new TestReq().setProps("employee", "maxmustermann@acme.com")
                .setProps("period", "13-2021").setProps("salary", 1234567).toJson();
        private final String updatePaymentWrongSalary = new TestReq().setProps("employee", "maxmustermann@acme.com")
                .setProps("period", "11-2022").setProps("salary", -1).toJson();
        private final String correctPaymentResponse = convert(new String[]{
                new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
                new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
                new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("period", "January-2021").setProps("salary", "1234 dollar(s) 56 cent(s)").toJson()
        });
        private final String correctPaymentResponseIvanov = convert(new String[]{
                new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 21 cent(s)").toJson(),
                new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("period", "February-2021").setProps("salary", "9 dollar(s) 87 cent(s)").toJson(),
                new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("period", "January-2021").setProps("salary", "6543 dollar(s) 21 cent(s)").toJson()
        });
        private final String firstResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 4).setProps("name", "Petr").setProps("lastname", "Petrov")
                        .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
        });
        private final String secondResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
        });
        private final String thirdResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").
                        setProps("roles", new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}).toJson()
        });
        private final String fourthResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 4).setProps("name", "Ivan").setProps("lastname", "Hoe")
                        .setProps("email", "ivanhoe@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
        });
      
        public AccountServiceTest() {
          super(AccountServiceApplication.class, "../service_db.mv.db");
        }
      
        private String convert(String[] trs) {
          JsonArray  jsonArray = new JsonArray();
          for (String tr : trs) {
            JsonElement jsonObject = JsonParser.parseString(tr);
            jsonArray.add(jsonObject);
          }
          return jsonArray.toString();
        }
      
      
        CheckResult testApi(String user, String body, int status, String api, String method, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status, api, method, message);
      
          return CheckResult.correct();
        }
      
        /**
         * Method for checking response on Post request for signup API
         *
         * @param body string representation of body content in JSON format (String)
         * @param status required http status for response (int)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testPostSignUpResponse(String body, int status, String[] role) {
      
          HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");
      
          JsonObject rightResponse = getJson(body).getAsJsonObject();
          rightResponse.remove("password");
      
          // Check is it JSON in response or something else
          if (!response.getJson().isJsonObject()) {
            return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                    response.getContent().getClass());
      
          }
      
          JsonObject jsonResponse = response.getJson().getAsJsonObject();
      
          // Check if password is presence in response
          if (jsonResponse.get("password") != null) {
            return CheckResult.wrong("You must remove password from response\n" +
                    jsonResponse);
          }
      
          if (jsonResponse.get("id") == null) {
            return CheckResult.wrong("Response must contain user ID\n" +
                    "Received response:\n" +
                    jsonResponse);
          }
      
      
          // Check JSON in response
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("id", isInteger())
                          .value("name", rightResponse.get("name").getAsString())
                          .value("lastname", rightResponse.get("lastname").getAsString())
                          .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                          .value("roles", role));
      
          if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
            return CheckResult.wrong("User ID must be unique!\n" +
                    "Received response:\n" +
                    jsonResponse);
          }
      
      
          userIdList.add(jsonResponse.get("id").getAsInt());
          return CheckResult.correct();
        }
      
        /**
         * Method for check the prohibition of requests specified types
         *
         * @param api testing api (String)
         * @param deniedMethods list of prohibited type requests
         * @param body string representation of body content in JSON format (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testDeniedMethods(String api, List<String> deniedMethods, String body) {
      
          HttpRequest getReq = get(api);
          HttpRequest postReq = post(api, body);
          HttpRequest putReq = put(api, body);
          HttpRequest deleteReq = delete(api);
      
          Map<String, HttpRequest> methodsMap = new LinkedHashMap<String,  HttpRequest>() {{
            put("get", getReq);
            put("post", postReq);
            put("put", putReq);
            put("delete", deleteReq);
          }};
      
          for (Map.Entry<String, HttpRequest> entry : methodsMap.entrySet()) {
            if (deniedMethods.contains(entry.getKey())) {
              HttpResponse response = entry.getValue().send();
              if (response.getStatusCode() != 405) {
                return CheckResult.wrong("Method " + entry.getKey().toUpperCase() + " is not allowed for " + api + " status code should be " +
                        "405, responded: " + response.getStatusCode());
              }
            }
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
          try {
            reloadSpring();
          } catch (Exception ex) {
            throw new UnexpectedError(ex.getMessage());
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for checking authentication
         *
         * @param user string representation of user information in JSON format (String)
         * @param status required http status for response (int)
         * @param message hint about reason of error (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        private CheckResult testUserRegistration(String user, int status, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);
      
          return CheckResult.correct();
        }
      
        CheckResult testChangePassword(String api, String body, int status, String user) {
          JsonObject userJson = getJson(user).getAsJsonObject();
      
          HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");
      
          // Check JSON in response
          if (status == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("email", userJson.get("email").getAsString().toLowerCase())
                            .value("status", "The password has been updated successfully"));
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for testing duplicate users
         *
         * @param user string representation of user information in JSON format (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        private CheckResult testUserDuplicates(String user) {
          HttpResponse response = post(signUpApi, user).send();
          // Check error message field in JSON response
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "User exist!")
                          .anyOtherValues());
          return CheckResult.correct();
        }
      
        private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
          JsonObject json = getJson(body).getAsJsonObject();
          HttpResponse response;
          for (int index = 0; index < breachedPass.length; index++) {
            if (json.has("password")) {
              json.remove("password");
              json.addProperty("password", breachedPass[index]);
            } else if (json.has("new_password")) {
              json.remove("new_password");
              json.addProperty("new_password", breachedPass[index]);
            }
            if (login.isEmpty() || password.isEmpty()) {
              response = post(api, json.toString()).send();
            } else {
              response = post(api, json.toString()).basicAuth(login, password).send();
            }
      
            if (response.getStatusCode() != 400) {
              return CheckResult.wrong("POST " + api + " should respond with "
                      + "status code 400 , responded: " + response.getStatusCode() + "\n"
                      + "Response body:\n" + response.getContent() + "\n"
                      + "Request body:\n" + json.toString() + "\n"
                      + message);
            }
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", 400)
                            .value("error", "Bad Request")
                            .value("message", "The password is in the hacker's database!")
                            .anyOtherValues());
      
          }
          return CheckResult.correct();
        }
      
      
        CheckResult testPostPaymentResponse(String user, String body, int status, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "POST", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", "Added successfully!")
                            .anyOtherValues());
          }
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/acct/payments")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testPutPaymentResponse(String user, String body, int status, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "PUT", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", "Updated successfully!")
                            .anyOtherValues());
          }
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/acct/payments")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testGetPaymentResponse(String user, int status, String correctResponse, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi , "GET", message);
      
          JsonArray correctJson = getJson(correctResponse).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
      
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
      
          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
          if (correctJson.size() != responseJson.size()) {
            return CheckResult.wrong("New data should not be added" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            for (int i = 0; i < responseJson.size(); i++) {
              if (!responseJson.get(i).equals(correctJson.get(i))) {
                return CheckResult.wrong("Get " + getEmployeePaymentApi  +" wrong data in response body" + "\n"
                        + "in response " + getPrettyJson(responseJson) + "\n"
                        + "must be " + getPrettyJson(correctJson));
              }
            }
          }
          return CheckResult.correct();
        }
      
        CheckResult testGetPaymentResponseParam(String user, int status, String request, String correctResponse, String message) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          JsonObject json = getJson(correctResponse).getAsJsonObject();
          JsonObject jsonRequest = getJson(request).getAsJsonObject();
          String param = jsonRequest.get("period").getAsString();
          HttpResponse response = get(getEmployeePaymentApi).addParam("period", param).basicAuth(login, password).send();
          if (response.getStatusCode() != status) {
            throw new WrongAnswer("GET" + " " + getEmployeePaymentApi + "?" + param + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n");
          }
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            if (!response.getJson().equals(json)) {
              return CheckResult.wrong("Get " + getEmployeePaymentApi  + "?period=" + param
                      + " wrong data in response body" + "\n"
                      + "in response " + getPrettyJson(response.getJson()) + "\n"
                      + "must be " + getPrettyJson(json));
            }
          }
      
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/empl/payment")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);
      
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
      
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
      
      
          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("Wrong dataa in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            for (int i = 0; i < responseJson.size(); i++) {
              String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
              for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
                roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
              }
              expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                      .check(isObject()
                              .value("id", isInteger())
                              .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                              .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                              .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                              .value("roles", isArray( roles )));
            }
          }
          return CheckResult.correct();
        }
      
      
        CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                       String answer, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status.value(),
                  api + param, "DELETE", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("user", param.toLowerCase())
                            .value("status", answer));
          }
      
          if (response.getStatusCode() != 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", status.getReasonPhrase())
                            .value("path", api + param)
                            .value("status", status.value())
                            .value("message", answer)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                    String role, String operation, String[] respRoles, String message) {
      
          JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
          JsonObject request = new JsonObject();
          request.addProperty("user", jsonUser.get("email").getAsString());
          request.addProperty("operation", operation);
          request.addProperty("role", role);
      
          HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", jsonUser.get("name").getAsString())
                            .value("lastname", jsonUser.get("lastname").getAsString())
                            .value("email", jsonUser.get("email").getAsString().toLowerCase())
                            .value("roles", isArray(respRoles)));
          }
      
          if (response.getStatusCode() != 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", status.getReasonPhrase())
                            .value("path", api)
                            .value("status", status.value())
                            .value("message", respRoles[0])
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);
      
          // Check JSON in response
          if (response.getStatusCode() != 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", status.getReasonPhrase())
                            .value("path", api)
                            .value("status", status.value())
                            .value("message", "Access Denied!")
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for testing api response
         *
         * @param user string representation of user information in JSON format (String)
         * @param body request body (String)
         * @param status expected response status (int)
         * @param api testing api (String)
         * @param method method for api (String)
         * @param message test hints for student (String)
         * @return response (HttpResponse)
         */
        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method, String message) {
          HttpRequest request = null;
          switch (method) {
            case "GET":
              request = get(api);
              break;
            case "POST":
              request = post(api, body);
              break;
            case "PUT":
              request = put(api, body);
              break;
            case "DELETE":
              request = delete(api);
              break;
          }
      
          if (user != null) {
            JsonObject userJson = getJson(user).getAsJsonObject();
            String password = userJson.get("password").getAsString();
            String login = userJson.get("email").getAsString().toLowerCase();
            request = request.basicAuth(login, password);
          }
          HttpResponse response = request.send();
      
          if (response.getStatusCode() != status) {
            throw new WrongAnswer(method + " " + api  + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n");
          }
          return response;
        }
      
        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[] {
      
                // Testing user registration negative tests
                () -> testApi(null, jDEmptyName, 400, signUpApi, "POST", "Empty name field!"), // 1
                () -> testApi(null, jDNoName, 400, signUpApi, "POST", "Name field is absent!"), // 2
                () -> testApi(null, jDEmptyLastName, 400, signUpApi, "POST", "Empty lastname field!"), // 3
                () -> testApi(null, jDNoLastName, 400, signUpApi, "POST", "Lastname field is absent!"), // 4
                () -> testApi(null, jDEmptyEmail, 400, signUpApi, "POST", "Empty email field!"), // 5
                () -> testApi(null, jDNoEmail, 400, signUpApi, "POST", "Email field is absent!"), // 6
                () -> testApi(null, jDEmptyPassword, 400, signUpApi, "POST", "Empty password field!"), // 7
                () -> testApi(null, jDNoPassword, 400, signUpApi, "POST", "Password field is absent!"),// 8
                () -> testApi(null, jDWrongEmail1, 400, signUpApi, "POST", "Wrong email!"), // 9
                () -> testApi(null, jDWrongEmail2, 400, signUpApi, "POST", "Wrong email!"), // 10
                () -> testBreachedPass(signUpApi, "", "", jDCorrectUser,
                        "Sending password from breached list"), // 11
      
                // Testing user registration positive tests
                () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 12
                () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 13
                () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 14
                () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 15
      
      //          // Testing user registration negative tests
                () -> testApi(null, jDCorrectUser, 400, signUpApi, "POST", "User must be unique!"), // 16
                () -> testUserDuplicates(jDCorrectUser), // 17
                () -> testApi(null, jDLower, 400, signUpApi, "POST",
                        "User must be unique (ignorecase)!"), // 18
      
      //
      //          // Test authentication, positive tests
                () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 19
                () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 20
      //
      //          // Test authentication, negative tests
                () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 21
                () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 22
                () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 23
                () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                        "This api only for authenticated user"), // 24
      //
      //          // Testing changing password
                () -> testApi(null, jDDuplicatePass, 401, changePassApi, "POST",
                        "This api only for authenticated user"), // 25
                () -> testApi(jDCorrectUser, jDShortPass, 400, changePassApi, "POST",
                        "The password length must be at least 12 chars!"), // 26
                () -> testApi(jDCorrectUser, jDDuplicatePass, 400, changePassApi, "POST",
                        "The passwords must be different!"), // 27
                () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                        jDDuplicatePass, "Sending password from breached list"), // 28
                () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
                () -> testApi(jDCorrectUser, "", 401, adminApi, "GET",
                        "Password must be changed!"), // 30
                () -> testApi(jDNewPass, "", 200, adminApi, "GET",
                        "Password must be changed!"), // 31
      
                // Testing persistence
                () -> restartApplication(), // 32
                () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                        " Check persistence."), // 33
      
                // Testing admin functions
                // Delete user
                () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/", "DELETE",
                        "Api must be available only to admin user"), // 34
                () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/johndoe@acme.com", "DELETE",
                        "Api must be available only to admin user"), // 35
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        firstResponseAdminApi, "Api must be available to admin user"), // 36
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                        "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 37
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        secondResponseAdminApi, "User must be deleted!"), // 38
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.BAD_REQUEST,
                        jDNewPass, "johndoe@acme.com",
                        "Can't remove ADMINISTRATOR role!", "Trying to delete admin"), // 39
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.NOT_FOUND,
                        jDNewPass, "johndoe@goole.com",
                        "User not found!", "Trying to delete non existing user"), // 40
                () -> testPostSignUpResponse(ivanHoeCorrectUser, 200, new String[] {"ROLE_USER"}), // 41
                () -> testUserRegistration(ivanHoeCorrectUser, 200, "User \"ivanhoe@acme.com\" must be added!"), // 42
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        fourthResponseAdminApi, "User \"ivanhoe@acme.com\" must be added!"), // 43
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                        "ivanhoe@acme.com", "Deleted successfully!", "Trying to delete user \"ivanhoe@acme.com\""), // 44
      
                // Testing persistence
                () -> restartApplication(), // 45
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        secondResponseAdminApi, "User must be deleted!"), // 46
      
      
      
                // Changing roles
                () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                        ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                        new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""), // 47
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        thirdResponseAdminApi, "Role must be changed!"), // 48
                () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                        ivanIvanovCorrectUser, "ACCOUNTANT", "REMOVE",
                        new String[] {"ROLE_USER"}, ""),
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        secondResponseAdminApi, "Role must be changed!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                        ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                        new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""),
      
                // Testing admin functions, negative tests
                () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                        ivanIvanovCorrectUser, "NEW_ROLE", "GRANT",
                        new String[] {"Role not found!"}, "Trying add not existing role!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        ivanIvanovCorrectUser, "ADMINISTRATOR", "GRANT",
                        new String[] {"The user cannot combine administrative and business roles!"},
                        "Trying add administrative role to business user!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        jDNewPass, "USER", "GRANT",
                        new String[] {"The user cannot combine administrative and business roles!"},
                        "Trying add business role to administrator!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        jDNewPass, "ADMINISTRATOR", "REMOVE",
                        new String[] {"Can't remove ADMINISTRATOR role!"}, "Trying remove administrator role!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        maxMusCorrectUser, "USER", "REMOVE",
                        new String[] {"The user must have at least one role!"}, "Trying remove single role!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        maxMusCorrectUser, "ACCOUNTANT", "REMOVE",
                        new String[] {"The user does not have a role!"}, "Trying remove not granted role!"),
                () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                        captainNemoWrongUser, "ACCOUNTANT", "REMOVE",
                        new String[] {"User not found!"}, "Trying remove role from non existing user!"),
      
                // Testing role model negative case
                () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                        "", "Trying to access administrative endpoint with business user"),
                () -> testRoleModelNegative("/api/admin/user/", "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                        "", "Trying to access administrative endpoint with business user"),
                () -> testRoleModelNegative("/api/admin/user", "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                        "", "Trying to access administrative endpoint with business user"),
                () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                        "", "Trying to access business endpoint with administrative user"),
                () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                        "", "Trying to access endpoint with wrong role"),
                () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                        "", "Trying to access business endpoint with administrative user"),
      
                // Testing business logic
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, paymentsList, 200, "Payment list must be added"),
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"),
                () -> testGetPaymentResponse(ivanIvanovCorrectUser, 200, correctPaymentResponseIvanov,
                        "Wrong status code!"),
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListSalary, 400, "Wrong salary in payment list"),
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"),
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListData, 400, "Wrong data in payment list"),
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"),
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListDuplicate, 400, "Duplicated entry in payment list"),
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"),
                () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongDate, 400,"Wrong date in request body!"),
                () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongSalary, 400, "Wrong salary in request body!"),
                () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePayment, 200, "Salary must be update!"),
                () -> testGetPaymentResponseParam(maxMusCorrectUser, 200, updatePayment, updatePaymentResponse,
                        "Salary must be update!"),
                () -> testGetPaymentResponseParam(maxMusCorrectUser, 400, updatePaymentWrongDate, updatePaymentResponse,
                        "Wrong date in request!"),
        };
      
      }
    learner_created: false
  - name: src/account/businesslayer/security/PasswordSecurity.java
    visible: true
    text: |
      package account.businesslayer.security;
      
      
      import account.businesslayer.exceptions.PasswordBreachedException;
      import account.businesslayer.exceptions.PasswordLengthException;
      import org.springframework.stereotype.Component;
      
      import java.util.HashSet;
      import java.util.List;
      import java.util.Set;
      
      @Component
      public class PasswordSecurity {
      
          private final Set<String> breachedPasswords = new HashSet<>(List.of(
                  "PasswordForJanuary", "PasswordForFebruary",
                  "PasswordForMarch", "PasswordForApril",
                  "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                  "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"
          ));
      
          public void verification(String password) {
              if (password.length() < 12) {
                  throw new PasswordLengthException();
              }
              if (breachedPasswords.contains(password)) {
                  throw new PasswordBreachedException();
              }
          }
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/UserExistsException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User exist!")
      public class UserExistsException extends RuntimeException {
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/PeriodExistsException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Period already exists for this employee")
      public class PeriodExistsException extends RuntimeException{
      }
    learner_created: true
  - name: src/account/businesslayer/security/SecurityConfig.java
    visible: true
    text: |
      package account.businesslayer.security;
      
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.http.HttpMethod;
      import org.springframework.security.config.Customizer;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
      import org.springframework.security.config.http.SessionCreationPolicy;
      import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
      import org.springframework.security.crypto.password.PasswordEncoder;
      import org.springframework.security.web.SecurityFilterChain;
      import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
      
      @Configuration
      @EnableWebSecurity
      public class SecurityConfig {
      
          @Bean
          public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
              return http
                      .httpBasic(Customizer.withDefaults())
                      .csrf(AbstractHttpConfigurer::disable)
                      .headers(headers -> headers.frameOptions().disable())
                      .authorizeHttpRequests(auth -> {
                          auth.requestMatchers("/error").permitAll();
                          auth.requestMatchers(AntPathRequestMatcher.antMatcher("/h2-console/**")).permitAll();
                          auth.requestMatchers(HttpMethod.POST, "/api/auth/signup").permitAll();
                          auth.requestMatchers("/actuator/shutdown").permitAll();
                          auth.requestMatchers("/api/acct/payments").permitAll();
                          auth.anyRequest().authenticated();
                      })
                      .sessionManagement(session -> session
                              .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                      .build();
          }
      
          @Bean
          public PasswordEncoder passwordEncoder() {
              return new BCryptPasswordEncoder();
          }
      }
    learner_created: true
  - name: src/account/businesslayer/user/PasswordChangerDTO.java
    visible: true
    text: |
      package account.businesslayer.user;
      
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      
      @Getter
      @AllArgsConstructor
      @NoArgsConstructor(force = true)
      public class PasswordChangerDTO {
          private final String email;
          private final String status;
      
          public PasswordChangerDTO(String email) {
              this.email = email;
              this.status = "The password has been updated successfully";
          }
      
      
      }
    learner_created: true
  - name: src/account/presentationlayer/Controllers/RegistrationController.java
    visible: true
    text: |
      package account.presentationlayer.Controllers;
      
      import account.businesslayer.exceptions.PasswordBreachedException;
      import account.businesslayer.exceptions.PasswordLengthException;
      import account.businesslayer.exceptions.SamePasswordException;
      import account.businesslayer.exceptions.UserExistsException;
      import account.businesslayer.security.PasswordSecurity;
      import account.businesslayer.user.PasswordChanger;
      import account.businesslayer.user.PasswordChangerDTO;
      import account.businesslayer.user.User;
      import account.businesslayer.user.UserMapper;
      import account.persistencelayer.UserRepository;
      import jakarta.validation.Valid;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.crypto.password.PasswordEncoder;
      import org.springframework.web.bind.annotation.PostMapping;
      import org.springframework.web.bind.annotation.RequestBody;
      import org.springframework.web.bind.annotation.RestController;
      
      import java.security.Principal;
      import java.util.Locale;
      
      @RestController
      public class RegistrationController {
      
          private final UserRepository userRepository;
          private final PasswordSecurity passwordSecurity;
          private final PasswordEncoder passwordEncoder;
          private final UserMapper userMapper;
      
          public RegistrationController(UserRepository userRepository, PasswordSecurity passwordSecurity,
                                        PasswordEncoder passwordEncoder, UserMapper userMapper) {
              this.userRepository = userRepository;
              this.passwordSecurity = passwordSecurity;
              this.passwordEncoder = passwordEncoder;
              this.userMapper = userMapper;
          }
      
          @PostMapping("/api/auth/signup")
          public ResponseEntity<Object> signup(@Valid @RequestBody User user) {
              if (userRepository.existsByEmailIgnoreCase(user.getEmail())) {
                  throw new UserExistsException();
              }
              passwordSecurity.verification(user.getPassword());
              user.setPassword(passwordEncoder.encode(user.getPassword()));
              userRepository.save(user);
              return new ResponseEntity<>(userMapper.toSignupDTO(user), HttpStatus.OK);
      
          }
      
          @PostMapping("/api/auth/changepass")
          public ResponseEntity<Object> changepass(@Valid @RequestBody PasswordChanger passwordChanger,
                                                   Principal principal) {
              passwordSecurity.verification(passwordChanger.getNewPassword());
              User user = userRepository.findByEmailIgnoreCase(principal.getName());
              if (passwordEncoder.matches(passwordChanger.getNewPassword(), user.getPassword())) {
                  throw new SamePasswordException();
              }
              user.setPassword(passwordEncoder.encode(passwordChanger.getNewPassword()));
              userRepository.save(user);
      
              return new ResponseEntity<>(new PasswordChangerDTO(user.getEmail().toLowerCase(Locale.ROOT)), HttpStatus.OK);
          }
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/ErrorException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST)
      public class ErrorException extends RuntimeException{
          public ErrorException(String message) {
              super(message);
          }
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/UserDoesNotExistsException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Employee does not exist")
      public class UserDoesNotExistsException extends RuntimeException {
      }
    learner_created: true
  - name: src/account/businesslayer/payment/PaymentConverter.java
    visible: true
    text: "package account.businesslayer.payment;\n\nimport account.businesslayer.user.User;\n\
    import account.persistencelayer.UserRepository;\nimport org.springframework.stereotype.Component;\n\
    \nimport java.time.Month;\nimport java.time.format.TextStyle;\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\n\
    \n@Component\npublic class PaymentConverter {\n    private final UserRepository\
    \ userRepository;\n\n    public PaymentConverter(UserRepository userRepository)\
    \ {\n        this.userRepository = userRepository;\n    }\n\n    private String\
    \ salaryConverter(Long salary) {\n        String salaryString = Long.toString(salary);\n\
    \        String dollars = salaryString.substring(0, salaryString.length() - 2);\n\
    \        String cents = salaryString.substring(salaryString.length() - 2);\n \
    \       if (dollars.isEmpty()) {\n            dollars = \"0\";\n        }\n  \
    \      return dollars + \" dollar(s) \" + cents + \" cent(s)\";\n    }\n\n   \
    \ private String periodConverter(String period) {\n        String[] parts = period.split(\"\
    -\");\n        Month month = Month.of(Integer.parseInt(parts[0]));\n        return\
    \ month.getDisplayName(TextStyle.FULL, Locale.ENGLISH) + \"-\" + parts[1];\n \
    \   }\n\n    public PaymentDTO userViewConverter (Payment payment) {\n       \
    \ User user = userRepository.findByEmailIgnoreCase(payment.getEmployee());\n \
    \       String period = periodConverter(payment.getPeriod());\n        String\
    \ salary = salaryConverter(payment.getSalary());\n        \n        return new\
    \ PaymentDTO(user.getName(), user.getLastname(), period, salary);\n    }\n   \
    \ \n    public List<PaymentDTO> convertAll (List<Payment> payroll) {\n       \
    \ List<PaymentDTO> result = new ArrayList<>();\n        for (Payment payment:payroll\n\
    \             ) {\n            result.add(userViewConverter(payment));\n     \
    \   }\n        Collections.reverse(result);\n        return result;\n    }\n}\n"
    learner_created: true
  - name: src/account/businesslayer/payment/Payment.java
    visible: true
    text: |
      package account.businesslayer.payment;
      
      import jakarta.persistence.*;
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      import lombok.Setter;
      
      @Entity
      @Table(name = "payments")
      @NoArgsConstructor(force = true)
      @AllArgsConstructor
      @Getter
      @Setter
      public class Payment {
          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          @Column(unique = true, nullable = false)
          private final long id;
          private final String employee;
          private final String period;
          private long salary;
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/PasswordLengthException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Password length must be 12 chars minimum!")
      public class PasswordLengthException extends RuntimeException{
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/PasswordBreachedException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The password is in the hacker's database!")
      public class PasswordBreachedException extends RuntimeException{
      }
    learner_created: true
  - name: src/account/persistencelayer/PaymentRepository.java
    visible: true
    text: |
      package account.persistencelayer;
      
      import account.businesslayer.payment.Payment;
      import org.springframework.data.jpa.repository.JpaRepository;
      import org.springframework.stereotype.Repository;
      
      import java.util.List;
      
      @Repository
      public interface PaymentRepository extends JpaRepository<Payment, Long> {
      
         List<Payment> findAllByEmployeeIgnoreCase(String employee);
         Payment findByEmployeeIgnoreCaseAndPeriod(String employee, String period);
         boolean existsByEmployeeAndPeriod(String employee, String period);
      }
    learner_created: true
  - name: src/account/businesslayer/payment/PaymentDTO.java
    visible: true
    text: |
      package account.businesslayer.payment;
      
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      import lombok.Setter;
      
      @NoArgsConstructor
      @AllArgsConstructor
      @Getter
      @Setter
      public class PaymentDTO {
          private String name;
          private String lastname;
          private String period;
          private String salary;
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/SamePasswordException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The passwords must be different!")
      public class SamePasswordException extends RuntimeException{
      
      }
    learner_created: true
  - name: src/account/businesslayer/user/PasswordChanger.java
    visible: true
    text: |
      package account.businesslayer.user;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.Size;
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      
      @NoArgsConstructor(force = true)
      @AllArgsConstructor
      @Getter
      public class PasswordChanger {
          @NotBlank
          @JsonProperty("new_password")
          private final String newPassword;
      }
    learner_created: true
  - name: src/account/presentationlayer/Controllers/PaymentController.java
    visible: true
    text: |
      package account.presentationlayer.Controllers;
      
      import account.businesslayer.exceptions.ErrorException;
      import account.businesslayer.payment.*;
      import account.businesslayer.user.User;
      import account.businesslayer.user.UserMapper;
      import account.persistencelayer.PaymentRepository;
      import account.persistencelayer.UserRepository;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.access.method.P;
      import org.springframework.web.bind.annotation.*;
      
      import java.security.Principal;
      import java.util.List;
      
      @RestController
      public class PaymentController {
          private final UserRepository userRepository;
          private final PaymentRepository paymentRepository;
          private final PaymentService paymentService;
          private final PaymentConverter paymentConverter;
      
          public PaymentController(UserRepository userRepository, PaymentRepository paymentRepository,
                                   PaymentService paymentService, PaymentConverter paymentConverter) {
              this.userRepository = userRepository;
              this.paymentRepository = paymentRepository;
              this.paymentService = paymentService;
              this.paymentConverter = paymentConverter;
          }
      
          @PostMapping("/api/acct/payments")
          public ResponseEntity<Object> addPayroll(@RequestBody List<Payment> payroll) {
              paymentService.addAll(payroll);
              return new ResponseEntity<>(new PaymentStatusDTO("Added successfully!"), HttpStatus.OK);
          }
      
          @PutMapping("/api/acct/payments")
          public ResponseEntity<Object> updatePayroll(@RequestBody Payment payment) {
              paymentService.updatePayment(payment);
              return new ResponseEntity<>(new PaymentStatusDTO("Updated successfully!"), HttpStatus.OK);
          }
      
          @GetMapping("/api/empl/payment")
          public ResponseEntity<Object> payment(Principal principal,
                                                @RequestParam(required = false) String period) {
              if (period != null) {
                  Payment payment = paymentRepository.findByEmployeeIgnoreCaseAndPeriod(principal.getName(), period);
                  if (payment == null) {
                      throw new ErrorException("Error!");
                  }
                  PaymentDTO paymentView = paymentConverter.userViewConverter(payment);
                  return new ResponseEntity<>(paymentView, HttpStatus.OK);
              }
              List<Payment> payroll = paymentRepository.findAllByEmployeeIgnoreCase(principal.getName());
              List<PaymentDTO> payrollView = paymentConverter.convertAll(payroll);
              return new ResponseEntity<>(payrollView, HttpStatus.OK);
          }
      
      }
    learner_created: true
  - name: src/account/businesslayer/payment/PaymentService.java
    visible: true
    text: |
      package account.businesslayer.payment;
      
      import account.businesslayer.exceptions.NegativeSalaryException;
      import account.businesslayer.exceptions.PeriodExistsException;
      import account.businesslayer.exceptions.UserDoesNotExistsException;
      import account.persistencelayer.PaymentRepository;
      import account.persistencelayer.UserRepository;
      import org.springframework.stereotype.Service;
      import org.springframework.transaction.annotation.Transactional;
      
      import java.util.List;
      
      @Service
      public class PaymentService {
      
          private final PaymentRepository paymentRepository;
          private final UserRepository userRepository;
      
          public PaymentService(PaymentRepository paymentRepository, UserRepository userRepository) {
              this.paymentRepository = paymentRepository;
              this.userRepository = userRepository;
          }
      
          @Transactional
          public void updatePayment(Payment payment) {
              inputCheck(payment);
              Payment loadPayment = paymentRepository
                      .findByEmployeeIgnoreCaseAndPeriod(payment.getEmployee(), payment.getPeriod());
              loadPayment.setSalary(payment.getSalary());
              paymentRepository.save(loadPayment);
          }
      
          @Transactional
          public void addAll(List<Payment> payroll) {
              for (Payment payment: payroll
                   ) {
                  inputCheck(payment);
                  if (paymentRepository.existsByEmployeeAndPeriod(payment.getEmployee(), payment.getPeriod())) {
                      throw new PeriodExistsException();
                  }
              }
              paymentRepository.saveAll(payroll);
          }
      
          private boolean isMonth(String period) {
              String[] parts = period.split("-");
              int result = Integer.parseInt(parts[0]);
              return result > 0 && result < 13;
          }
      
          private boolean userExists(String employee) {
              return userRepository.existsByEmailIgnoreCase(employee);
          }
      
          private boolean isNonNegativeSalary(Long salary) {
              return salary > 0;
          }
      
          private void inputCheck(Payment payment) {
              if (!userExists(payment.getEmployee())) {
                  throw new UserDoesNotExistsException();
              }
              if (!isMonth(payment.getPeriod())) {
                  throw new PeriodExistsException();
              }
              if (!isNonNegativeSalary(payment.getSalary())) {
                  throw new NegativeSalaryException();
              }
          }
      }
    learner_created: true
  - name: src/account/businesslayer/payment/PaymentStatusDTO.java
    visible: true
    text: |
      package account.businesslayer.payment;
      
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      
      @NoArgsConstructor(force = true)
      @AllArgsConstructor
      @Getter
      public class PaymentStatusDTO {
          private final String status;
      }
    learner_created: true
  - name: src/account/businesslayer/exceptions/NegativeSalaryException.java
    visible: true
    text: |
      package account.businesslayer.exceptions;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Salary is negative")
      public class NegativeSalaryException extends RuntimeException{
      }
    learner_created: true
  - name: src/account/businesslayer/user/UserService.java
    visible: true
    text: |
      package account.businesslayer.user;
      
      
      import account.persistencelayer.UserRepository;
      import org.springframework.security.core.userdetails.UserDetails;
      import org.springframework.security.core.userdetails.UserDetailsService;
      import org.springframework.security.core.userdetails.UsernameNotFoundException;
      import org.springframework.stereotype.Service;
      
      @Service
      public class UserService implements UserDetailsService {
          private final UserRepository userRepository;
      
          public UserService(UserRepository userRepository) {
              this.userRepository = userRepository;
          }
      
      
          @Override
          public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
              User user = userRepository.findByEmailIgnoreCase(email);
              if (user == null) {
                  throw new UsernameNotFoundException("User doesn't exist");
              }
              return user;
          }
      }
    learner_created: true
  - name: src/account/businesslayer/validations/interfaces/PasswordLength.java
    visible: true
    learner_created: true
  - name: src/account/businesslayer/validations/classes/PasswordLengthValidator.java
    visible: true
    learner_created: true
  - name: src/account/businesslayer/validations/interfaces/NotBreachedPassword.java
    visible: true
    learner_created: true
  - name: src/account/businesslayer/validations/classes/BreachedPasswordValidator.java
    visible: true
    learner_created: true
  - name: src/account/presentationlayer/Controllers/ValidationExceptionHandler.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/16605#comment
status: Unchecked
record: 5
